legend.title = element_text(hjust = 0.5))+ # centralizar títulos
theme(plot.title = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))+ # negrito nos títulos
geom_hline(yintercept = 0, color="black")+ # linha no 0 do eixo y
theme(axis.title.y = element_text(angle = 90))
grid.arrange(G1,G2, ncol=1)
Res2<-((newdata3$PCS-newdata1$PCS3_est)^2)
Res2<-((newdata3$PCS-newdata3$PCS3_est)^2)
SQResiduo<- sum(Res2)
SQTotal<-var(newdata3$PCS)*((length(newdata3$PCS))-1)
R2<-(1-(SQResiduo/SQTotal))
a<-(length(newdata3$PCS)-1)/(length(newdata3$PCS)-2)
R2adj<-(1-(a*(1-R2)))
Syx<-sqrt(SQResiduo/((length(newdata3$PCS))-3))
Syx_Porc<-(Syx/(mean(newdata3$PCS)))*100
R2<-round(R2, 2)
R2adj<-round(R2adj,2)
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("R$^{2}$", "R$_{adj}^{2}$", "S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
View(modelo3)
0,68/0,82
0.68/0.82
1-0.82
# Ajuste do modelo
modelo3<-lm(formula =PCS~-1+extrativos+lignina+holocelulose, data=tabela3); modelo3
# Estatísticas das estimativas dos paramentros do modelo
summary(modelo3)
# Anova da regressão do modelo
anova(modelo3)
View(modelo3)
tabela4 <- read_excel("Dados.xlsx",
sheet = "Analise_imediata")
View(tabela4)
tabela4 %>%
kbl(caption = "Tabela dos Dados") %>%
kable_classic(full_width = F, html_font = "Times", font_size = 12)%>%
scroll_box(width = "200px", height = "300px")
tabela4 %>%
kbl(caption = "Tabela dos Dados") %>%
kable_classic(full_width = F, html_font = "Times", font_size = 12)%>%
scroll_box(height = "300px")
# Poder Calorífico Superior
y <- tabela4$PCS
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
PCS<-data.frame(Med_e_sd, Coef_de_Variacao)
# Carbono Fixo
y <- tabela4$CF
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
CF<-data.frame(Med_e_sd, Coef_de_Variacao)
# Teor de Voláteis
y <- tabela4$TV
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
TV<-data.frame(Med_e_sd, Coef_de_Variacao)
# Teor de Cinzas
y <- tabela4$CZ
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
CZ<-data.frame(Med_e_sd, Coef_de_Variacao)
# Junção dos data.frame
dados<-rbind(PCS,CF)
dados<-rbind(dados, TV)
dados<-rbind(dados, CZ)
# Criar uma coluna com o nome das variáveis
dados<-mutate(dados,
Variaveis=c("Poder Calorífico Superior (MJ/kg)",
"Carbono Fixo", "Teor de Voláteis", "Teor de Cinzas"))
dados<-data.frame(dados)
#Organizar as colunas no data.frame
date<-dplyr::select(dados, Variaveis, Med_e_sd, Coef_de_Variacao)
# Criar da Tabela Descritiva
knitr::kable(date, align = 'cc', caption = "Tabela Descritiva",
col.names = c("Variáveis", "Média $\\pm$ sd", "  CV(%)")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
par(mfrow=c(1,4))
boxplot(tabela4$CF, col="blue", main="Box Plot",
ylab= "Carbono Fixo (%)", adj=0.5, ylim=c(5,30))
boxplot(tabela4$TV, col="purple",main="Box Plot",
ylab= "Teor de Voláteis (%)", adj=0.5, ylim=c(70, 95))
boxplot(tabela4$CZ,col="green2",main="Box Plot", ylab= "Teor de Cinzas (%)",
adj=0.5, ylim=c(0,6))
boxplot(tabela4$PCS,col="gray",main="Box Plot", ylab= "PCS (MJ/kg)",
adj=0.5)
chart.Correlation(tabela4, histogram =TRUE)
chart.Correlation(tabela4, histogram =TRUE, pch=20)
chart.Correlation(tabela4, histogram =TRUE)
# Ajuste do modelo
modelo4<-lm(formula =PCS~-1+CF+TV+CZ, data=tabela4); modelo4
# Estatísticas das estimativas dos paramentros do modelo
summary(modelo4)
# Anova da regressão do modelo
anova(modelo4)
newdatas<-data.frame(CF= c(20),TV= c(78), CZ= c(0.4))
PCS_estimado4 = predict(modelo4, newdatas, interval = "confidence");
PCS_estimado4 # Valores do limite de confiança dos valores preditos
par(mfrow=c(2,2))
plot(modelo4, pch=20)
## Normalidade dos Resíduos
shapiro.test(modelo4$residuals)
ks.test(modelo4$residuals, "pnorm")
## Independencia dos Resíduos (Durbin-Watson)
durbinWatsonTest(modelo4)
## Homocedasticidade (Breusch-Pagan)
bptest(modelo4)
ncvTest(modelo4)
PCS4_est<-predict.lm(modelo4)
newdata4 = data.frame(tabela4, PCS4_est)
Res<-(((newdata4$PCS-newdata4$PCS4_est)/(newdata4$PCS))*100)
newdata4 = data.frame(tabela4, PCS4_est,Res)
G1<-ggplot(newdata4) +
geom_point(size=2, aes(x=PCS, y=PCS4_est), color="red2")+
geom_abline(intercept = 0, slope = 1, color = "black")+
geom_point(size=2, aes(x=PCS4_est, y=PCS), color="blue2")+
theme_classic()+ # aparencia clean do gráfico
labs(x = "PCS Observada (MJ/kg)",
y = "PCS Estimada (Mj/kg)",
title = "Gráfico 1:1")+ # legendas
scale_x_continuous(breaks = seq(15, 25, 5), limits= c(15, 25))+
scale_y_continuous(breaks = seq(15, 25, 5), limits= c(15, 25))+
theme( plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5))+ # centralizar títulos
theme(plot.title = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))  # negrito nos títulos
G2<-ggplot(newdata4) +
geom_point(size=2, aes(x=PCS, y=Res)
,color="black")+ # gráfico de pontos
theme_classic()+ # aparencia clean do gráfico
labs(x = "PCS Observada (g/cm³)",
y = "Resíduo (%)",
title = "Gráfico de Resíduos")+ # legendas
scale_x_continuous(breaks = seq(15, 25, 5), limits= c(15, 25)) +
scale_y_continuous(breaks = seq(-30, 30, 10), limits= c(-30,30)) +
theme( plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5))+ # centralizar títulos
theme(plot.title = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))+ # negrito nos títulos
geom_hline(yintercept = 0, color="black")+ # linha no 0 do eixo y
theme(axis.title.y = element_text(angle = 90))
grid.arrange(G1,G2, ncol=1)
resid<-(newdata4$PCS-newdata4$PCS4_est)
Res2<-resid^2
SQResiduo<- sum(Res2)
SQTotal<-var(newdata4$PCS)*((length(newdata4$PCS))-1)
R2<-(1-(SQResiduo/SQTotal))
a<-(length(newdata4$PCS)-1)/(length(newdata4$PCS)-2)
R2adj<-(1-(a*(1-R2)))
Syx<-sqrt(SQResiduo/((length(newdata4$PCS))-3))
Syx_Porc<-(Syx/(mean(newdata4$PCS)))*100
R2<-round(R2, 2)
R2adj<-round(R2adj,2)
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("R$^{2}$", "R$_{adj}^{2}$", "S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
# Ajuste do modelo
modelo4<-lm(formula =PCS~-1+CF+TV+CZ, data=tabela4); modelo4
# Estatísticas das estimativas dos paramentros do modelo
summary(modelo4)
# Anova da regressão do modelo
anova(modelo4)
tabela_padronizada4<- scale(tabela4) # padrozinação do banco de dados
tabela_padronizada4<- data.frame(tabela_padronizada4) # tornar os dados padronizados em `data.frame`
lm(lm(formula =PCS~-1+CF+TV+CZ, data=tabela_padronizada4)) # coeficientes com dados padronizados
modelo4<-lm(lm(formula =PCS~-1+CF+TV+CZ, data=tabela4)
mod.simples4<-lm(formula=PCS~1, data=tabela4)
modelo4<-lm(formula =PCS~-1+CF+TV+CZ, data=tabela4)
mod.simples4<-lm(formula=PCS~1, data=tabela4)
stepAIC(modelo4, scope=list(upper=modelo4,
lower=mod.simples4), direction = "backward")
modelo4<-lm(formula =PCS~-1+CF+TV+CZ, data=tabela4)
mod.simples4<-lm(formula=PCS~1, data=tabela4)
stepAIC(modelo4, scope=list(upper=modelo4,
lower=mod.simples4), direction = "backward")
tabela4 <- read_excel("Dados.xlsx",
sheet = "Analise_imediata")
# Ajuste do modelo
modelo4<-lm(formula =PCS~-1+CF+TV+CZ, data=tabela4); modelo4
# Estatísticas das estimativas dos paramentros do modelo
summary(modelo4)
# Anova da regressão do modelo
anova(modelo4)
PCS4_est<- exp(fitted(modelo4))
resid<-(tabela4$PCS-PCS4_est)
Res2<-resid^2
SQResiduo<- sum(Res2)
SQTotal<-var(tabela4$PCS)*((length(tabela4$PCS))-1)
R2<-(1-(SQResiduo/SQTotal))
a<-(length(tabela4$PCS)-1)/(length(tabela4$PCS)-2)
R2adj<-(1-(a*(1-R2)))
Syx<-sqrt(SQResiduo/((length(tabela4$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela4$PCS)))*100
R2<-round(R2, 2)
R2adj<-round(R2adj,2)
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("R$^{2}$", "R$_{adj}^{2}$", "S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
PCS4_est<- predict(modelo4)
resid<-(tabela4$PCS-PCS4_est)
Res2<-resid^2
SQResiduo<- sum(Res2)
SQTotal<-var(tabela4$PCS)*((length(tabela4$PCS))-1)
R2<-(1-(SQResiduo/SQTotal))
a<-(length(tabela4$PCS)-1)/(length(tabela4$PCS)-2)
R2adj<-(1-(a*(1-R2)))
Syx<-sqrt(SQResiduo/((length(tabela4$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela4$PCS)))*100
R2<-round(R2, 2)
R2adj<-round(R2adj,2)
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("R$^{2}$", "R$_{adj}^{2}$", "S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
pacotes <- c("tidyverse", "readxl", "ggpubr", "kableExtra",
"PerformanceAnalytics", "scatterplot3d", "MASS",
"gridExtra", "car", "lmtest", "plyr", "knitr", "dplyr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
tabela3 <- read_excel("Dados.xlsx",
sheet = "Composicao_quimica")
# Ajuste do modelo
modelo3<-lm(formula =PCS~-1+extrativos+lignina+holocelulose, data=tabela3); modelo3
# Estatísticas das estimativas dos paramentros do modelo
summary(modelo3)
# Anova da regressão do modelo
anova(modelo3)
PCS3_est<-predict(modelo3)
resid<-(tabela3$PCS-PCS3_est)
Res2<-resid^2
SQResiduo<- sum(Res2)
SQTotal<-((tabela3$PCS-(mean(tabela3$PCS)))^2)
R2<-(1-(SQResiduo/SQTotal))
a<-(length(tabela3$PCS)-1)/(length(tabela3$PCS)-2)
R2adj<-(1-(a*(1-R2)))
Syx<-sqrt(SQResiduo/((length(tabela3$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela3$PCS)))*100
R2<-round(R2, 2)
R2adj<-round(R2adj,2)
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("R$^{2}$", "R$_{adj}^{2}$", "S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
PCS3_est<-predict(modelo3)
resid<-(tabela3$PCS-PCS3_est)
Res2<-resid^2
SQResiduo<- sum(Res2)
SQTotal<-sum(((tabela3$PCS-(mean(tabela3$PCS)))^2))
R2<-(1-(SQResiduo/SQTotal))
a<-(length(tabela3$PCS)-1)/(length(tabela3$PCS)-2)
R2adj<-(1-(a*(1-R2)))
Syx<-sqrt(SQResiduo/((length(tabela3$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela3$PCS)))*100
R2<-round(R2, 2)
R2adj<-round(R2adj,2)
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("R$^{2}$", "R$_{adj}^{2}$", "S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
View(modelo3)
View(tabela3)
View(modelo3)
modelo3[["coefficients"]][["extrativos"]]
modelo3[["coefficients"]][["lignina"]]
modelo3[["coefficients"]][["holocelulose"]]
PCS3_est<-predict.lm(modelo3)
newdata3 = data.frame(tabela3, PCS3_est)
Res<-(((newdata3$PCS-newdata3$PCS3_est)/(newdata3$PCS))*100)
newdata3 = data.frame(tabela3, PCS3_est,Res)
G1<-ggplot(newdata3) +
geom_point(size=2, aes(x=PCS, y=PCS3_est), color="red2")+
geom_abline(intercept = 0, slope = 1, color = "black")+
geom_point(size=2, aes(x=PCS3_est, y=PCS), color="blue2")+
theme_classic()+ # aparencia clean do gráfico
labs(x = "PCS Observada (MJ/kg)",
y = "PCS Estimada (Mj/kg)",
title = "Gráfico 1:1")+ # legendas
scale_x_continuous(breaks = seq(17.0, 18.0, 0.20), limits= c(17.0, 18.0))+
scale_y_continuous(breaks = seq(17.0, 18.0, 0.20), limits= c(17.0, 18.0))+
theme( plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5))+ # centralizar títulos
theme(plot.title = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))  # negrito nos títulos
G2<-ggplot(newdata3) +
geom_point(size=2, aes(x=PCS, y=Res)
,color="black")+ # gráfico de pontos
theme_classic()+ # aparencia clean do gráfico
labs(x = "PCS Observada (g/cm³)",
y = "Resíduo (%)",
title = "Gráfico de Resíduos")+ # legendas
scale_x_continuous(breaks = seq(17.0, 18.0, 0.20), limits= c(17.0, 18.0)) +
scale_y_continuous(breaks = seq(-30, 30, 10), limits= c(-30,30)) +
theme( plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5))+ # centralizar títulos
theme(plot.title = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))+ # negrito nos títulos
geom_hline(yintercept = 0, color="black")+ # linha no 0 do eixo y
theme(axis.title.y = element_text(angle = 90))
grid.arrange(G1,G2, ncol=1)
View(newdata3)
PCS3_est<-predict.lm(modelo3)
newdata3 = data.frame(tabela3, PCS3_est)
Res<-(((newdata3$PCS-newdata3$PCS3_est)/(newdata3$PCS))*100)
newdata3 = data.frame(tabela3, PCS3_est,Res)
newdata3<-mutate(newdata3,SQRes=((newdata3$PCS-newdata3$PCS3_est)^2))
View(newdata3)
PCS3_est<-predict.lm(modelo3)
newdata3 = data.frame(tabela3, PCS3_est)
Res<-(((newdata3$PCS-newdata3$PCS3_est)/(newdata3$PCS))*100)
newdata3 = data.frame(tabela3, PCS3_est,Res)
newdata3<-mutate(newdata3,SQRes=((newdata3$PCS-newdata3$PCS3_est)^2))
SQResiduo_soma<-sum(newdata3$SQRes)
Syx<-sqrt(SQResiduo/((length(tabela3$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela3$PCS)))*100
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(R2,R2adj,Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
Syx<-sqrt(SQResiduo/((length(tabela3$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela3$PCS)))*100
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
PCS3_est<- predict(modelo3)
resid<-(tabela4$PCS-PCS3_est)
PCS3_est<- predict(modelo3)
resid<-(tabela3$PCS-PCS3_est)
Res2<-resid^2
SQResiduo<- sum(Res2)
Syx<-sqrt(SQResiduo/((length(tabela3$PCS))-3))
Syx_Porc<-(Syx/(mean(tabela3$PCS)))*100
Syx<-round(Syx,2)
Syx_Porc<-round(Syx_Porc, 2)
newdata33 = data.frame(Syx,Syx_Porc)
# Criar da Tabela Descritiva
knitr::kable(newdata33, align = 'cc',
caption = "Medidas de Precisão do Modelo",
col.names = c("S$_{yx}$", "S$_{yx}$%")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
library(readxl)
Dados <- read_excel("Dados.xlsx", sheet = "Composicao_quimica")
View(Dados)
install.packages("tidyverse")
pacotes <- c("tidyverse", "readxl", "ggpubr", "kableExtra",
"PerformanceAnalytics", "scatterplot3d", "MASS",
"gridExtra", "car", "lmtest", "plyr", "knitr", "dplyr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
tabela4 <- read_excel("Dados.xlsx",
sheet = "Analise_imediata")
tabela4 %>%
kbl(caption = "Tabela dos Dados") %>%
kable_classic(full_width = F, html_font = "Times", font_size = 12)%>%
scroll_box(height = "300px")
# Poder Calorífico Superior
y <- tabela4$PCS
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
PCS<-data.frame(Med_e_sd, Coef_de_Variacao)
# Carbono Fixo
y <- tabela4$CF
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
CF<-data.frame(Med_e_sd, Coef_de_Variacao)
# Teor de Voláteis
y <- tabela4$TV
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
TV<-data.frame(Med_e_sd, Coef_de_Variacao)
# Teor de Cinzas
y <- tabela4$CZ
mean_and_sd <- function(y) {
m <- mean(y) # média
s <- sd(y) # desvio padrão
# sprintf("%0.3f U00B1 %0.3f", m, s)
sprintf("%0.2f $\\pm$ %0.2f", m, s)}
Med_e_sd<- mean_and_sd(y)
cv <- function(y) {100 * sd(y)/mean(y)}
Coef_de_Variacao<-cv(y) # coeficiente de variação
Coef_de_Variacao<-round(Coef_de_Variacao, 2)
CZ<-data.frame(Med_e_sd, Coef_de_Variacao)
# Junção dos data.frame
dados<-rbind(PCS,CF)
dados<-rbind(dados, TV)
dados<-rbind(dados, CZ)
# Criar uma coluna com o nome das variáveis
dados<-mutate(dados,
Variaveis=c("Poder Calorífico Superior (MJ/kg)",
"Carbono Fixo", "Teor de Voláteis", "Teor de Cinzas"))
dados<-data.frame(dados)
#Organizar as colunas no data.frame
date<-dplyr::select(dados, Variaveis, Med_e_sd, Coef_de_Variacao)
# Criar da Tabela Descritiva
knitr::kable(date, align = 'cc', caption = "Tabela Descritiva",
col.names = c("Variáveis", "Média $\\pm$ sd", "  CV(%)")) %>%
kable_classic(full_width = F, html_font = "Times", font_size = 16)
y <- tabela4$PCS
scale(y) # padronização da variável
score_z <- function(y, media = NULL, despad = NULL) {if (is.null(media)) {
media <- mean(y)}
if (is.null(despad)) {despad <- sd(y)}
(y - media)/despad}
status <- ifelse(abs(score_z(y)) > 2, "outlier", "tipical") # ocorrência de outlier
table(status)
yaml::yaml.load(..., eval.expr = TRUE)
install.packages("tinytex")
tinytex::install_tinytex()
yaml::yaml.load(..., eval.expr = TRUE)
